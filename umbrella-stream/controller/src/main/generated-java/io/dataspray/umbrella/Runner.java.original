/*
 * Copyright 2024 Matus Faro
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package io.dataspray.umbrella;

import com.google.common.collect.ImmutableList;
import io.dataspray.runner.Entrypoint;
import io.dataspray.runner.RawCoordinator;
import io.dataspray.runner.dto.web.HttpRequest;
import io.dataspray.runner.dto.web.HttpResponse;
import io.dataspray.runner.util.GsonUtil;
import jakarta.ws.rs.core.MediaType;

import java.util.Optional;

public class Runner extends Entrypoint {

    private static final ImmutableList<MediaType> ENDPOINT_ALLOWED_CONTENT_TYPES_RULESLIST = ImmutableList.of(MediaType.valueOf("application/json"));
    private static final ImmutableList<MediaType> ENDPOINT_ALLOWED_CONTENT_TYPES_RULESSET = ImmutableList.of(MediaType.valueOf("application/json"));
    private final Processor processor = new Controller();

    @Override
    public HttpResponse web(HttpRequest request, RawCoordinator rawCoordinator) {

        WebCoordinator coordinator = new CoordinatorImpl(
                rawCoordinator,
                Optional.empty()
        );

        String[] pathDirs = request.getRawPath().split("/");
        MediaType mediaType = MediaType.valueOf(request.getHeaders().getOrDefault("Content-Type", "text/plain"));

        if (
                "GET".equalsIgnoreCase(request.getHttpRequestContext().getHttp().getMethod())
                        && pathDirs.length == 4
                        && "org".equals(pathDirs[1])
                        && "rules".equals(pathDirs[3])
                        && request.getHeadersCaseInsensitive().containsKey("Authorization")
                        && ENDPOINT_ALLOWED_CONTENT_TYPES_RULESLIST.stream().anyMatch(mediaType::isCompatible)

        ) {
            return processor.webRulesList(
                    pathDirs[2],
                    request.getHeadersCaseInsensitive().get("Authorization"),

                    HttpResponse.<Rules>builder(),
                    coordinator);
        }

        if (
                "PUT".equalsIgnoreCase(request.getHttpRequestContext().getHttp().getMethod())
                        && pathDirs.length == 4
                        && "org".equals(pathDirs[1])
                        && "rules".equals(pathDirs[3])
                        && request.getHeadersCaseInsensitive().containsKey("Authorization")
                        && ENDPOINT_ALLOWED_CONTENT_TYPES_RULESSET.stream().anyMatch(mediaType::isCompatible)

        ) {
            return processor.webRulesSet(
                    GsonUtil.get().fromJson(request.getBodyAsString(), Rules.class),
                    pathDirs[2],
                    request.getHeadersCaseInsensitive().get("Authorization"),

                    HttpResponse.builder(),
                    coordinator);
        }

        return processor.web(
                request,
                HttpResponse.<Object>builder(),
                coordinator);
    }
}
